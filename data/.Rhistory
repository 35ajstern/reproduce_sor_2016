RowSideColors=col1[rowFam_5p], breaks=seq(0,15,0.5), main="RT in DE-Junc 5p")
d <- hm$rowDendrogram[[1]]
hm$rowDendrogram[[1]] <- hm$rowDendrogram[[2]]
hm$rowDendrogram[[2]] <- d
d <- hm$rowDendrogram[[2]][[2]][[1]]
hm$rowDendrogram[[2]][[2]][[1]] <- hm$rowDendrogram[[2]][[2]][[2]]
hm$rowDendrogram[[2]][[2]][[2]] <- d
pdf("Fig2_heatmaps_types_of_junctions_5prime_10reads5samples_mean30_July15.pdf")
heatmap.2(tmp_5p, Colv=FALSE, dendrogram="row", Rowv=hm$rowDendrogram, scale="none", labCol=x,
trace="none", key=TRUE, density.info="none",col=myPalette, cexRow=0.5, cexCol=1.2,
rowsep=c(4,26),sepcolor=1,breaks=seq(0,15,0.5),
RowSideColors=col1[rowFam_5p], main="RT-in-5p")
dev.off()
head(retval[,17])
head(retval[,13])
head(retval[,4])
dir <- apply(retval,1, function(x){
if(x[4] == x[13]){
return("sense")
}else{
return("antisense")
}})
length(dir)
dim(retval)
dir <- apply(retval,1, function(x){
if(x[4] == x[13]){
return("sense")
}else{
return("antisense")
}})
names(dir) <- retval[,1]
head(dir)
x=retval
y=p3
tmp <- r_juncs$normalizedCounts;
dim(tmp)
tmp <- r_juncs$normalizedCounts;
ind <- which(rowMeans(tmp)>=30);
tmp <- log2(tmp[ind,]+1) # cutoff can be adjusted: e.g. mean reads of samples of any stage is above 30
dim(tmp)
tmp_t <-  tmp[which(rownames(tmp) %in% x[which(x$Position_in_Transcript %in% y),1]),]
tmp_t1 <- tmp_t[which(dir[rownames(tmp_t)] == "sense"),]
tmp_t2 <- tmp_t[which(dir[rownames(tmp_t)] == "antisense"),]
head(tmp_t1)
dim(tmp_t1)
dim(tmp_t2)
head(ens2gn)
nm1 <- unlist(lapply(rownames(tmp_t1), function(z){
unique(ens2gn[strsplit(z,"_")[[1]][1],1])
}))
nm2 <- unlist(lapply(rownames(tmp_t2), function(z){
unique(ens2gn[strsplit(z,"_")[[1]][1],1])
}))
nm1
nm2
message(length(nm1))
message(length(nm2))
get_num <- function(x, y){
#x: retval
#y: p3, "internal", or p5
tmp <- r_juncs$normalizedCounts;
ind <- which(rowMeans(tmp)>=30);
tmp <- log2(tmp[ind,]+1) # cutoff can be adjusted: e.g. mean reads of samples of any stage is above 30
tmp_t <-  tmp[which(rownames(tmp) %in% x[which(x$Position_in_Transcript %in% y),1]),]
tmp_t1 <- tmp_t[which(dir[rownames(tmp_t)] == "sense"),]
tmp_t2 <- tmp_t[which(dir[rownames(tmp_t)] == "antisense"),]
nm1 <- unlist(lapply(rownames(tmp_t1), function(z){
unique(ens2gn[strsplit(z,"_")[[1]][1],1])
}))
nm2 <- unlist(lapply(rownames(tmp_t2), function(z){
unique(ens2gn[strsplit(z,"_")[[1]][1],1])
}))
message(length(nm1))
message(length(nm2))
}
get_num(retval, p3)
nm1
nm2
get_num <- function(x, y){
#x: retval
#y: p3, "internal", or p5
tmp <- r_juncs$normalizedCounts;
ind <- which(rowMeans(tmp)>=30);
tmp <- log2(tmp[ind,]+1) # cutoff can be adjusted: e.g. mean reads of samples of any stage is above 30
tmp_t <-  tmp[which(rownames(tmp) %in% x[which(x$Position_in_Transcript %in% y),1]),]
tmp_t1 <- tmp_t[which(dir[rownames(tmp_t)] == "sense"),]
tmp_t2 <- tmp_t[which(dir[rownames(tmp_t)] == "antisense"),]
nm1 <- unlist(lapply(rownames(tmp_t1), function(z){
unique(ens2gn[strsplit(z,"_")[[1]][1],1])
}))
nm2 <- unlist(lapply(rownames(tmp_t2), function(z){
unique(ens2gn[strsplit(z,"_")[[1]][1],1])
}))
message(length(nm1))
message(length(nm2))
}
get_num(retval, p3)
get_num(retval, "internal")
get_num(retval, p5)
rt_map <- read.table("rt_ids_map.txt", sep="\t", stringsAsFactors = F, quote="", comment="")[,c(1,2)]
load("../family_RT_exp_heatmap/GSE44183_norm.rda")
x
x <- sapply(sampleInfo$cell_type_s, function(x) strsplit(x, " ")[[1]][1])
x<- factor(x, levels=unique(x))
get_num(retval, p3)
get_num(retval, "internal")
get_num(retval, p5)
get_num <- function(xx, y){
#xx: retval
#y: p3, "internal", or p5
tmp <- r_juncs$normalizedCounts;
ind <- which(rowMeans(tmp)>=30);
tmp <- log2(tmp[ind,]+1) # cutoff can be adjusted: e.g. mean reads of samples of any stage is above 30
#   a = t(apply(tmp,1,function(y) tapply(y,x,mean)))
#   idx.tmp = apply(a>=100,1,function(X) any(X))
tmp_t <-  tmp[which(rownames(tmp) %in% xx[which(xx$Position_in_Transcript %in% y),1]),]
tmp_t1 <- tmp_t[which(dir[rownames(tmp_t)] == "sense"),]
tmp_t2 <- tmp_t[which(dir[rownames(tmp_t)] == "antisense"),]
nm1 <- unlist(lapply(rownames(tmp_t1), function(z){
unique(ens2gn[strsplit(z,"_")[[1]][1],1])
}))
nm2 <- unlist(lapply(rownames(tmp_t2), function(z){
unique(ens2gn[strsplit(z,"_")[[1]][1],1])
}))
message(length(nm1))
message(length(nm2))
}
get_num(retval, p3)
get_num(retval, "internal")
get_num(retval, p5)
x
xx=retval
tmp <- r_juncs$normalizedCounts;
a = t(apply(tmp,1,function(y) tapply(y,x,mean)))
idx.tmp = apply(a>=30,1,function(X) any(X))
tmp <- r_juncs$normalizedCounts;
ind <- which(rowMeans(tmp)>=30);
ind
length(ind)
dim(tmp)
tmp <- r_juncs$normalizedCounts;
a = t(apply(tmp,1,function(y) tapply(y,x,mean)))
ind = apply(a>=30,1,function(X) any(X))
length(ind)
ind
tmp <- r_juncs$normalizedCounts;
ind <- which(rowMeans(tmp)>=30);
head(ind)
class(ind)
names(ind)
class(ind)
head(ind)
head(tmp)
a = t(apply(tmp,1,function(y) tapply(y,x,mean)))
ind = apply(a>=30,1,function(X) any(X))
which(ind)
which(ind)
a = t(apply(tmp,1,function(y) tapply(y,x,mean)))
ind = which(apply(a>=30,1,function(X) any(X)))
length(ind)
get_num <- function(xx, y){
#xx: retval
#y: p3, "internal", or p5
tmp <- r_juncs$normalizedCounts;
#  ind <- which(rowMeans(tmp)>=30);
a = t(apply(tmp,1,function(y) tapply(y,x,mean)))
ind = which(apply(a>=30,1,function(X) any(X)))
tmp <- log2(tmp[ind,]+1) # cutoff can be adjusted: e.g. mean reads of samples of any stage is above 30
tmp_t <-  tmp[which(rownames(tmp) %in% xx[which(xx$Position_in_Transcript %in% y),1]),]
tmp_t1 <- tmp_t[which(dir[rownames(tmp_t)] == "sense"),]
tmp_t2 <- tmp_t[which(dir[rownames(tmp_t)] == "antisense"),]
nm1 <- unlist(lapply(rownames(tmp_t1), function(z){
unique(ens2gn[strsplit(z,"_")[[1]][1],1])
}))
nm2 <- unlist(lapply(rownames(tmp_t2), function(z){
unique(ens2gn[strsplit(z,"_")[[1]][1],1])
}))
message(length(nm1))
message(length(nm2))
}
get_num(retval, p3)
get_num(retval, "internal")
get_num(retval, p5)
get_num <- function(xx, y){
#xx: retval
#y: p3, "internal", or p5
tmp <- r_juncs$normalizedCounts;
ind <- which(rowMeans(tmp)>=30);   # cutoff can be adjusted: e.g. mean reads of samples of any stage is above 30
#   a = t(apply(tmp,1,function(y) tapply(y,x,mean)))
#   ind = which(apply(a>=30,1,function(X) any(X)))
tmp <- log2(tmp[ind,]+1)
tmp_t <-  tmp[which(rownames(tmp) %in% xx[which(xx$Position_in_Transcript %in% y),1]),]
tmp_t1 <- tmp_t[which(dir[rownames(tmp_t)] == "sense"),]
tmp_t2 <- tmp_t[which(dir[rownames(tmp_t)] == "antisense"),]
nm1 <- unlist(lapply(rownames(tmp_t1), function(z){
unique(ens2gn[strsplit(z,"_")[[1]][1],1])
}))
nm2 <- unlist(lapply(rownames(tmp_t2), function(z){
unique(ens2gn[strsplit(z,"_")[[1]][1],1])
}))
message(length(nm1))
message(length(nm2))
}
get_num(retval, p3)
get_num(retval, "internal")
get_num(retval, p5)
rt_map <- read.table("rt_ids_map.txt", sep="\t", stringsAsFactors = F, quote="", comment="")[,c(1,2)]
rownames(rt_map) <- rt_map[,1]
tmp <- filtered[de,]
ind1 <- which(rowMeans(tmp)>=5) # max 30?
e <- unlist(lapply(rownames(tmp), function(x){strsplit(x,"_")[[1]][1]}))
ind2 <- which(ids[match(e, ids[,1]),3] == "protein_coding") # when only using PC genes, some cases (e.g. MMERVK9C_I-int) were not chosen anymore
ind <- intersect(ind1,ind2)
tmp <- log(tmp[ind,]+1)
nm <- unlist(lapply(rownames(tmp), function(x){
tt1 <- ens2gn[strsplit(x,"_")[[1]][1],1]
tt2 <- rt_map[strsplit(x,"_")[[1]][2],2]
return(paste(tt1,tt2,sep=":"))
}))
tmp <- as.matrix(tmp);rownames(tmp) <- nm
tmp2 <- aggregate(tmp, by=list(nm),mean); rownames(tmp2) <- tmp2[,1];
tmp2 <- tmp2[,2:18]
tmp <- as.matrix(tmp2)
tt <- sapply(rownames(tmp), function(x){
ttt <- strsplit(x, ":")[[1]][2]
strsplit(ttt, ',')[[1]][1]
})
ff <- fam[tt,3];
subff <- tt
top_rep_subfam <- names(sort(table(subff), decreasing=T)[1:50])
length(top_rep_subfam)
for(i in 1:length(top_rep_subfam)){
sf <- top_rep_subfam[i]
sf_exp <- log(counts_r$norm[which(rownames(counts_r$norm) == sf),]+1)
#sub_tmp <- rbind(tmp[subff==sf,],sf_exp)
sub_tmp <- tmp[subff==sf,]
#rownames(sub_tmp)[nrow(sub_tmp)] <- sf
pdf(paste("subfam_vs_juncs/Fig2_by_subfam_junc_",sf,"_heatmap_Mar4_2016_JChen.pdf", sep=""))
heatmap.2(log10(sub_tmp+1), Colv=FALSE, dendrogram="row", scale="row", labCol=x,
trace="none", key=TRUE, density.info="none",col=myPalette,
cexRow=.35, cexCol=0.9, main=paste("By Subfamily Junctions:\n",sf,sep=""))
dev.off()
}
e <- unlist(lapply(de, function(x){strsplit(x,"_")[[1]][1]}))
ind <- which(ids[match(e, ids[,1]),3] == "protein_coding")
de2 <- de[ind];
tmp <- filtered[de2,]
ind <- which(rowMeans(tmp)>=10)
#tmp <- log2(tmp[ind,]+1)
tmp <- log2(tmp[ind,])
nm <- unlist(lapply(rownames(tmp), function(x){
tt1 <- ens2gn[strsplit(x,"_")[[1]][1],1]
tt2 <- rt_map[strsplit(x,"_")[[1]][2],2]
return(paste(tt1,tt2,sep=":"))
}))
tmp <- as.matrix(tmp);rownames(tmp) <- nm
tmp2 <- aggregate(tmp, by=list(nm),mean); rownames(tmp2) <- tmp2[,1];
tmp2 <- tmp2[,2:18]
tmp <- as.matrix(tmp2)
stage1 <- sort(apply(tmp[,1:2],1,mean), decreasing = T)
stage2 <- sort(apply(tmp[,3:5],1,mean), decreasing = T)
stage3 <- sort(apply(tmp[,6:8],1,mean), decreasing = T)
stage4 <- sort(apply(tmp[,9:11],1,mean), decreasing = T)
stage5 <- sort(apply(tmp[,12:14],1,mean), decreasing = T)
stage6 <- sort(apply(tmp[,15:17],1,mean), decreasing = T)
pdf("Fig2_Top_junctions_in_each_stage_barplots_Mar4_2016_Chen.pdf", width=11,height=7)
par(mfrow=c(3,2))
barplot(log2(stage1+1)[1:10], cex.names=0.5, main="oocyte", ylab="log2 Normalized Reads", las=2)
barplot(log2(stage2+1)[1:10], cex.names=0.5, main="pronucleus", ylab="log2 Normalized Reads", las=2)
barplot(log2(stage3+1)[1:10], cex.names=0.5, main="2-cell", ylab="log2 Normalized Reads", las=2)
barplot(log2(stage4+1)[1:10], cex.names=0.5, main="4-cell", ylab="log2 Normalized Reads", las=2)
barplot(log2(stage5+1)[1:10], cex.names=0.5, main="8-cell", ylab="log2 Normalized Reads", las=2)
barplot(log2(stage6+1)[1:10], cex.names=0.5, main="morula", ylab="log2 Normalized Reads", las=2)
dev.off()
de
dim(filtered)
e <- unlist(lapply(de, function(x){strsplit(x,"_")[[1]][1]}))
ind <- which(ids[match(e, ids[,1]),3] == "protein_coding")
de2 <- de[ind];
tmp <- filtered[de2,]
ind <- which(rowMeans(tmp)>=10)
#tmp <- log2(tmp[ind,]+1)
tmp <- log2(tmp[ind,])
dim(tmp)
nm <- unlist(lapply(rownames(tmp), function(x){
tt1 <- ens2gn[strsplit(x,"_")[[1]][1],1]
tt2 <- rt_map[strsplit(x,"_")[[1]][2],2]
return(paste(tt1,tt2,sep=":"))
}))
tmp <- as.matrix(tmp);rownames(tmp) <- nm
tmp2 <- aggregate(tmp, by=list(nm),mean); rownames(tmp2) <- tmp2[,1];
tmp2 <- tmp2[,2:18]
tmp <- as.matrix(tmp2)
dim(tmp)
nm
head(tmp)
apply(tmp[,1:2],1,mean)
stage1 <- sort(apply(tmp[,1:2],1,mean), decreasing = T)
stage2 <- sort(apply(tmp[,3:5],1,mean), decreasing = T)
stage3 <- sort(apply(tmp[,6:8],1,mean), decreasing = T)
stage4 <- sort(apply(tmp[,9:11],1,mean), decreasing = T)
stage5 <- sort(apply(tmp[,12:14],1,mean), decreasing = T)
stage6 <- sort(apply(tmp[,15:17],1,mean), decreasing = T)
barplot(log2(stage1+1)[1:10], cex.names=0.5, main="oocyte", ylab="log2 Normalized Reads", las=2)
barplot(log2(stage2+1)[1:10], cex.names=0.5, main="pronucleus", ylab="log2 Normalized Reads", las=2)
barplot(log2(stage3+1)[1:10], cex.names=0.5, main="2-cell", ylab="log2 Normalized Reads", las=2)
barplot(log2(stage4+1)[1:10], cex.names=0.5, main="4-cell", ylab="log2 Normalized Reads", las=2)
barplot(log2(stage5+1)[1:10], cex.names=0.5, main="8-cell", ylab="log2 Normalized Reads", las=2)
barplot(log2(stage6+1)[1:10], cex.names=0.5, main="morula", ylab="log2 Normalized Reads", las=2)
dev.off()
load("GSE44183_norm.rda")
counts_r
top_rep_subfam <- names(sort(table(subff), decreasing=T)[1:50])
for(i in 1:length(top_rep_subfam)){
sf <- top_rep_subfam[i]
sf_exp <- log(counts_r$norm[which(rownames(counts_r$norm) == sf),]+1)
#sub_tmp <- rbind(tmp[subff==sf,],sf_exp)
sub_tmp <- tmp[subff==sf,]
#rownames(sub_tmp)[nrow(sub_tmp)] <- sf
pdf(paste("subfam_vs_juncs/Fig2_by_subfam_junc_",sf,"_heatmap_Mar4_2016_JChen.pdf", sep=""))
heatmap.2(log10(sub_tmp+1), Colv=FALSE, dendrogram="row", scale="row", labCol=x,
trace="none", key=TRUE, density.info="none",col=myPalette,
cexRow=.35, cexCol=0.9, main=paste("By Subfamily Junctions:\n",sf,sep=""))
dev.off()
}
rt_map <- read.table("rt_ids_map.txt", sep="\t", stringsAsFactors = F, quote="", comment="")[,c(1,2)]
rownames(rt_map) <- rt_map[,1]
View(counts_r)
class(counts_r)
length(counts_r)
names(counts_r)
length(r1)
r1$W
counts_r$W
counts_r$normalizedCounts != r1$normalizedCounts
sum(counts_r$normalizedCounts != r1$normalizedCounts)
ind2
ind1
tmp <- filtered[de,]
ind1 <- which(rowMeans(tmp)>=5) # max 30?
e <- unlist(lapply(rownames(tmp), function(x){strsplit(x,"_")[[1]][1]}))
ind2 <- which(ids[match(e, ids[,1]),3] == "protein_coding") # when only using PC genes, some cases (e.g. MMERVK9C_I-int) were not chosen anymore
ind <- intersect(ind1,ind2)
tmp <- log(tmp[ind,]+1)
head(tmp)
ff
subff
head(subff)
length(subff)
length(ff)
head(ff)
unique(ff)
head(fam,10)
head(fam,20)
head(fam,30)
subff
head(subff)
head(ff)
sort(table(subff), decreasing=T)
table(subff)
names(sort(table(subff), decreasing=T)[1:50])
sort(table(subff), decreasing=T)
top_rep_subfam <- names(sort(table(subff), decreasing=T)[1:50])
top_rep_subfam
head(fam)
head(fam,20)
tt
top_rep_subfam
i=1
sf <- top_rep_subfam[i]
sf
sf_exp <- log(counts_r$norm[which(rownames(counts_r$norm) == sf),]+1)
sub_tmp <- tmp[subff==sf,]
pdf(paste("subfam_vs_juncs/Fig2_by_subfam_junc_",sf,"_heatmap_Mar4_2016_JChen.pdf", sep=""))
dev.off()
paste("subfam_vs_juncs/Fig2_by_subfam_junc_",sf,"_heatmap_Mar4_2016_JChen.pdf", sep=""
)
pdf(paste("subfam_vs_juncs/Fig2_by_subfam_junc_",sf,"_heatmap_Mar4_2016_JChen.pdf", sep=""))
heatmap.2(log10(sub_tmp+1), Colv=FALSE, dendrogram="row", scale="row", labCol=x,
trace="none", key=TRUE, density.info="none",col=myPalette,
cexRow=.35, cexCol=0.9, main=paste("By Subfamily Junctions:\n",sf,sep=""))
pdf(paste("subfam_vs_juncs/Fig2_by_subfam_junc_",sf,"_heatmap_Mar4_2016_JChen.pdf", sep=""))
heatmap.2(log10(sub_tmp+1), Colv=FALSE, dendrogram="row", scale="row", labCol=x,
trace="none", key=TRUE, density.info="none",col=myPalette,
cexRow=.35, cexCol=0.9, main=paste("By Subfamily Junctions:\n",sf,sep=""))
dev.off()
for(i in 1:length(top_rep_subfam)){
sf <- top_rep_subfam[i]
sf_exp <- log(counts_r$norm[which(rownames(counts_r$norm) == sf),]+1)
#sub_tmp <- rbind(tmp[subff==sf,],sf_exp)
sub_tmp <- tmp[subff==sf,]
#rownames(sub_tmp)[nrow(sub_tmp)] <- sf
pdf(paste("subfam_vs_juncs/Fig2_by_subfam_junc_",sf,"_heatmap_Mar4_2016_JChen.pdf", sep=""))
heatmap.2(log10(sub_tmp+1), Colv=FALSE, dendrogram="row", scale="row", labCol=x,
trace="none", key=TRUE, density.info="none",col=myPalette,
cexRow=.35, cexCol=0.9, main=paste("By Subfamily Junctions:\n",sf,sep=""))
dev.off()
}
heatmap.2(log10(sub_tmp+1), Colv=FALSE, dendrogram="row", scale="row", labCol=x,
trace="none", key=TRUE, density.info="none",col=myPalette,
cexRow=.35, cexCol=0.9, main=paste("By Subfamily Junctions:\n",sf,sep=""))
sf
i
i=1
sf <- top_rep_subfam[i]
sub_tmp <- tmp[subff==sf,]
heatmap.2(log10(sub_tmp+1), Colv=FALSE, dendrogram="row", scale="row", labCol=x,
trace="none", key=TRUE, density.info="none",col=myPalette,
cexRow=.35, cexCol=0.9, main=paste("By Subfamily Junctions:\n",sf,sep=""))
setwd("~/Desktop/Research-Lin/code/Fig2_data_scripts_for_Yun 2/Fig2_data_and_scripts_for_Yun")
factor(3)
factorial(3)
exp(-3*1)
mm = function(x){
exp(-3*x) * (3*x)^(3*x) / factorial(3*x)
}
mm(10)
mm(100)
mm(20)
mm(30)
mm(40)
mm(50)
mm(5)
library(flexclust)
setwd("~/Desktop/Research-Lin/code/Fig2_data_scripts_for_Yun 2/Fig2_data_and_scripts_for_Yun")
fam <- read.table("repbase.family.map", row.names=1, as.is=TRUE, sep='\t')
myPalette <- colorRampPalette(rev(brewer.pal(11, "Spectral")))
retval <- read.csv("DE_junction_summary_new_Jun23_2016_JChen.csv") # the file generated from server arwen: /scratch/users/helab/seq_data/GSE44183_mouse/junctions/
juncs <- read.table("gene.juncs", sep="\t", as.is=T, row.names = 1)
p3 <- c("3prime","3prime,In_last_exon","In_last_exon,3prime","In_last_exon") # these are all considered as 3prime cases
p5 <- c("5prime","5prime,In_first_exon","In_first_exon,5prime","In_first_exon" ) #these are all considered as 5prime cases
rt_map <- read.table("rt_ids_map.txt", sep="\t", stringsAsFactors = F, quote="", comment="")[,c(1,2)]
rownames(rt_map) <- rt_map[,1]
ens2gn <- read.table("ensmus2gn.txt", sep="\t", stringsAsFactors = F, quote="", comment="", row.names=1)
col1 <- c(brewer.pal(9, "Set1")[-6], brewer.pal(8, "Set2"))
filter0 <- apply(juncs, 1, function(x) length(x[x>=10])>5) # 10 reads in 5 samples; as a global cutoff, later steps all subjest to this cut-off; can be adjusted
retval <- retval[which(retval[,1] %in% names(filter0)[which(filter0=="TRUE")]),]
pdf("Junction_level_vs_RT-Transcript_positions_July15_2016.pdf")
barplot(c(length(which(retval$Position_in_Transcript %in% p3)),
length(which(retval$Position_in_Transcript == "internal")),
length(which(retval$Position_in_Transcript %in% p5))),
names=c("3p", "int", "5p"), main="No. of Junctions\nbased on RT-Transcript Position")
boxplot(retval$logCPM[which(retval$Position_in_Transcript %in% p3)],    ## Are the logCPM avereaged across all stages? Is it only junctions, no exons?
retval$logCPM[which(retval$Position_in_Transcript == "internal")],
retval$logCPM[which(retval$Position_in_Transcript %in% p5)], names=c("3p", "int", "5p"), main="logCPM of Junctions")
boxplot(#retval$logCPM[which(retval$Position_in_Transcript %in% p3)],
log2(retval$junction_oocyte[which(retval$Position_in_Transcript %in% p3)]+1),
log2(retval$junction_pronucleus[which(retval$Position_in_Transcript %in% p3)]+1),log2(retval$junction_2.cell[which(retval$Position_in_Transcript %in% p3)]+1),
log2(retval$junction_4.cell[which(retval$Position_in_Transcript %in% p3)]+1),log2(retval$junction_8.cell[which(retval$Position_in_Transcript %in% p3)]+1),
log2(retval$junction_morula[which(retval$Position_in_Transcript %in% p3)]+1),NULL,
#retval$logCPM[which(retval$Position_in_Transcript == "internal")],
log2(retval$junction_oocyte[which(retval$Position_in_Transcript == "internal")]+1),
log2(retval$junction_pronucleus[which(retval$Position_in_Transcript == "internal")]+1),log2(retval$junction_2.cell[which(retval$Position_in_Transcript == "internal")]+1),
log2(retval$junction_4.cell[which(retval$Position_in_Transcript == "internal")]+1),log2(retval$junction_8.cell[which(retval$Position_in_Transcript == "internal")]+1),
log2(retval$junction_morula[which(retval$Position_in_Transcript == "internal")]+1),NULL,
#retval$logCPM[which(retval$Position_in_Transcript %in% p5)],
log2(retval$junction_oocyte[which(retval$Position_in_Transcript %in% p5)]+1),
log2(retval$junction_pronucleus[which(retval$Position_in_Transcript %in% p5)]+1),log2(retval$junction_2.cell[which(retval$Position_in_Transcript %in% p5)]+1),
log2(retval$junction_4.cell[which(retval$Position_in_Transcript %in% p5)]+1),log2(retval$junction_8.cell[which(retval$Position_in_Transcript %in% p5)]+1),
log2(retval$junction_morula[which(retval$Position_in_Transcript %in% p5)]+1),
names=c("3p,oo","3p,pron","3p,2c","3p,4c","3p,8c","3p,mor","",
"int,oo","int,pron","int,2c","int,4c","int,8c","int,mor","",
"5p,oo","5p,pron","5p,2c","5p,4c","5p,8c","5p,mor"),
main="Level of Junctions(log2)",las=2)
lines(x=c(0,25),y=c(1,1), lty=3)
lines(x=c(0,25),y=c(2,2), lty=3)
lines(x=c(0,25),y=c(3,3), lty=3)
lines(x=c(0,25),y=c(4,4), lty=3)
dev.off()
install.packages("poibin")
ppoibin
ppoibin()
library(poibin)
ppoibin()
ppoibin
install.packages(c('repr', 'IRdisplay', 'crayon', 'pbdZMQ', 'devtools'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
version
IRkernel::installspec(name = 'ir32', displayname = 'R 3.2')
install.packages(c('repr', 'IRdisplay', 'crayon', 'pbdZMQ', 'devtools'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
IRkernel::installspec()
devtools::install_github('IRkernel/IRkernel',force=TRUE)
IRkernel::installspec()
IRkernel::installspec()
.libPaths()
getwd()
setwd('~/Desktop/stat215a-review/data/')
read.csv("Bishayee Colony Counts 10.27.97-3.8.01.xlsx")
read.csv("Bishayee Colony Counts 10.27.97-3.8.01.xlsx",skip=3)
read.csv("Bishayee Colony Counts 10.27.97-3.8.01.xlsx",skip=2,header=T)
colClasses = c(rep("integer", 7), rep("NULL", 6))
colClasses
read.csv("Bishayee Colony Counts 10.27.97-3.8.01.xlsx",skip=2,header=T,colClasses = c(rep("NULL", 3), rep("numeric", 4)))
c(rep("NULL", 3), rep("numeric", 4))
read.csv("Bishayee Colony Counts 10.27.97-3.8.01.xlsx",skip=4,header=T,colClasses = c(rep("NULL", 3), rep("numeric", 4)))
read.csv("Bishayee Colony Counts 10.27.97-3.8.01.xlsx",skip=4,header=TRUE,colClasses = c(rep("NULL", 3), rep("numeric", 4)))
read.csv("Bishayee Colony Counts 10.27.97-3.8.01.xlsx",skip=4,header=TRUE,colClasses = c(rep("NULL", 3), rep("numeric", 4)))
read.csv("Bishayee Colony Counts 10.27.97-3.8.01.xlsx",skip=4,header=TRUE,colClasses = c(rep("NULL", 3), rep("numeric", 4)),sep='\t')
read.csv("Bishayee Colony Counts 10.27.97-3.8.01.xlsx",skip=4,header=TRUE,colClasses = c(rep("NULL", 3), rep("numeric", 4)),sep='\t')
read.csv("Bishayee Colony Counts 10.27.97-3.8.01.xlsx",skip=4,header=TRUE,colClasses = c(rep("NULL", 3), rep("numeric", 4)),sep='\t')
1+1
read.csv("Bishayee Colony Counts 10.27.97-3.8.01.xlsx",skip=4,header=TRUE,colClasses = c(rep("NULL", 3), rep("numeric", 4)),sep='\t')
read.csv("Bishayee Colony Counts 10.27.97-3.8.01.xlsx",skip=4,header=TRUE,colClasses = c(rep("NULL", 3), rep("numeric", 4)),sep='\t',as.is=TRUE)
read.csv("Bishayee Colony Counts 10.27.97-3.8.01.xlsx",skip=4,header=TRUE,colClasses = c(rep("NULL", 3), rep("numeric", 4)),sep='\t',as.is=TRUE)
read.csv("Bishayee Colony Counts 10.27.97-3.8.01.xlsx",skip=4,header=TRUE,colClasses = c(rep("NULL", 3), rep("numeric", 4)),sep='\t',as.is=TRUE)
read.csv("Bishayee Colony Counts 10.27.97-3.8.01.xlsx",skip=4,header=TRUE,colClasses = c(rep("NULL", 3), rep("numeric", 4)),sep='\t',as.is=TRUE)
read.csv("Bishayee Colony Counts 10.27.97-3.8.01.xlsx",skip=4,header=TRUE,colClasses = c(rep("NULL", 3), rep("numeric", 4)),sep='\t',as.is=TRUE)
read.csv("Bishayee Colony Counts 10.27.97-3.8.01.xlsx",skip=4,header=TRUE,colClasses = c(rep("NULL", 3), rep("numeric", 4)),sep='\t',as.is=TRUE)
read.csv("Bishayee Colony Counts 10.27.97-3.8.01.xlsx",skip=4,header=TRUE,colClasses = c(rep("NULL", 3), rep("numeric", 4)),sep='\t',as.is=TRUE)
