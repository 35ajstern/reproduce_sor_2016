data(package="curatedOvarianData")
data(TCGA_eset)
TCGA_eset
ncores = 1
n_cluster = 10
pred_n_cluster = n_cluster
min_cluster_size = 5
max_cluster_size = 20
size = vector(mode="numeric", length = n_cluster)
size = sample(min_cluster_size:max_cluster_size, n_cluster, replace=T)
group_info = rep(1:n_cluster,size)
Entropy = function(cor_matrix){
#   print(length(cor_matrix[cor_matrix > 1]))
#   print(length(cor_matrix[cor_matrix < -1]))
#   cor_matrix[cor_matrix > 1] = NA
#   cor_matrix[cor_matrix < -1] = NA
hist_result = hist(cor_matrix,breaks=seq(-1.1,1.1,by=1/100),freq=T,xlim=c(-1,1))
prob = hist_result$counts / sum(hist_result$counts)
return ( sum(na.omit(-prob * log2(prob))) )
}
Cluster = function(pred_n_cluster,size,cor_matrix){
gene_expression = mvrnorm(n = 1000, mu = rep(0,sum(size)), Sigma = cor_matrix)
#colnames(gene_expression)=group_info
km_res = kmeans(x=t(gene_expression),centers=pred_n_cluster,iter.max=20)
return(km_res)
}
Accuracy = function(n_cluster,size,km_res,pred_n_cluster){
tmp = list()
for(i in 1:n_cluster){
tmp[[i]] = matrix(1,nc=size[i],nr=size[i])
}
true_res = as.matrix(bdiag(tmp))
pred_res = matrix(0,nr=length(km_res$cluster),nc=length(km_res$cluster))
for(i in 1:pred_n_cluster){
idx = which(km_res$cluster == i)
rowcol_pos = merge(idx,idx)
pred_res[rowcol_pos$x,rowcol_pos$y] = 1
}
accuracy = sum(true_res[upper.tri(true_res)] ==
pred_res[upper.tri(pred_res)]) / length(true_res[upper.tri(true_res)])
return (accuracy)
}
TEST_PD = function(cor_matrix){
qnorm(mean=0.2,sd=0.05,p=0.01)
a=mvrnorm(n = 100, mu = rep(0,nrow(cor_matrix)), Sigma = cor_matrix)
cor(a[,1],a[,10])
cor(a[,14],a[,19])
print(sum(cor_matrix != t(cor_matrix)))
print(eigen(cor_matrix)$values)
}
Generate_CorMat = function(pop_method = 'trunclognormal', group_method = 'trunclognormal',n_cluster=10,size,
pop_geomean=sqrt(0.1), pop_geosd=1.3,
pop_geomin=0,pop_geomax=sqrt(0.5),
group_geomean=sqrt(0.1),group_geosd=1.3,
group_geomin=0,group_geomax=sqrt(0.5),
pop_left=0,pop_right=sqrt(0.25),
group_left=sqrt(0.3),group_right=sqrt(0.4),
pop_sd=0.15,pop_mean=sqrt(0.1),
pop_min=0,pop_max=sqrt(0.5),
group_sd=0.1,group_mean=sqrt(0.25),
group_min=0,group_max=sqrt(0.5)){
coeff_mat = list()
for(i in 1:n_cluster){
tmp = matrix(0,nc=2,nr=size[i])
colnames(tmp) = c('population','group')
if(pop_method == 'trunclognormal'){
tmp[,'population'] = rlnormTrunc(n=size[i], meanlog = log(pop_geomean), sdlog = log(pop_geosd),
min=pop_geomin, max=pop_geomax)
} else if(pop_method == 'uniform'){
tmp[,'population'] = runif(n=size[i], min=pop_left,max=pop_right)
} else if(pop_method == 'truncnormal'){
tmp[,'population'] = rtruncnorm(n=size[i],mean = pop_mean, sd = pop_sd,
a=pop_min, b=pop_max)
}
if(group_method == 'trunclognormal'){
tmp[,'group'] = rlnormTrunc(n=size[i], meanlog = log(group_geomean), sdlog = log(group_geosd),
min=group_geomin, max=group_geomax)
} else if (group_method == 'uniform'){
tmp[,'group'] = runif(n=size[i], min=group_left,max=group_right)
} else if (group_method == 'truncnormal'){
tmp[,'group'] = rtruncnorm(n=size[i],mean = group_mean, sd = group_sd,
a=group_min, b=group_max)
}
coeff_mat[[i]] = tmp
}
diag_mat = list()
for(i in 1:n_cluster){
diag_mat[[i]] = coeff_mat[[i]] %*% t(coeff_mat[[i]])
diag(diag_mat[[i]]) = 1
}
row_mat = list()
for(i in 1:(n_cluster) ){
row_mat[[i]] = diag_mat[[i]]
if(i > 1){
for(j in (i-1):1){
tmp = coeff_mat[[i]][,'population'] %*% t(coeff_mat[[j]][,'population'])
row_mat[[i]] = cbind(tmp,row_mat[[i]])
}
}
for(j in (i+1):n_cluster){
if(j > n_cluster) break
tmp = coeff_mat[[i]][,'population'] %*% t(coeff_mat[[j]][,'population'])
row_mat[[i]] = cbind(row_mat[[i]],tmp)
}
}
cov_mat = do.call(rbind, row_mat)
flip_sign_idx = sample(1:sum(size),floor(sum(size)/2), replace=F)
cov_mat[,flip_sign_idx] = -cov_mat[,flip_sign_idx]
cov_mat[flip_sign_idx,] = -cov_mat[flip_sign_idx,]
#cov_mat[cov_mat>1]=1
### cov_mat = as.matrix(nearPD(cov_mat)$mat)
# ?? attention
#cov_mat[cov_mat>1]=1
return (cov_mat)
}
tmp1 = seq(sqrt(0.1),sqrt(0.2),by=0.05)
tmp2 = c(seq(1.1,1.5,by=0.1),seq(1.6,3,by=0.4))
tmp3 = seq(sqrt(0.1),sqrt(0.4),by=0.08)
tmp4 = c(seq(1.1,1.5,by=0.1),seq(1.6,3,by=0.4))
tmp_para = expand.grid(tmp1,tmp2,tmp3,tmp4)
tmp_para = as.list(as.data.frame(t(tmp_para)))
entropy_trunclognormal = mclapply(tmp_para,function(x){
print(x)
cor_matrix = Generate_CorMat(pop_method = 'trunclognormal', group_method = 'trunclognormal',
n_cluster=n_cluster,size=size,
pop_geomean=x[1], pop_geosd=x[2],
pop_geomin=0,pop_geomax=sqrt(0.5),
group_geomean=x[3],group_geosd=x[4],
group_geomin=0,group_geomax=sqrt(0.5))
return(Entropy(cor_matrix=cor_matrix))
},mc.cores =ncores)
library(Matrix)
library(MASS)
library(cluster)
library(fpc)
library(EDASeq)
library(RColorBrewer)
library(truncnorm)
library(EnvStats)
library(parallel)
tmp1 = seq(sqrt(0.1),sqrt(0.2),by=0.05)
tmp2 = c(seq(1.1,1.5,by=0.1),seq(1.6,3,by=0.4))
tmp3 = seq(sqrt(0.1),sqrt(0.4),by=0.08)
tmp4 = c(seq(1.1,1.5,by=0.1),seq(1.6,3,by=0.4))
tmp_para = expand.grid(tmp1,tmp2,tmp3,tmp4)
tmp_para = as.list(as.data.frame(t(tmp_para)))
entropy_trunclognormal = mclapply(tmp_para,function(x){
print(x)
cor_matrix = Generate_CorMat(pop_method = 'trunclognormal', group_method = 'trunclognormal',
n_cluster=n_cluster,size=size,
pop_geomean=x[1], pop_geosd=x[2],
pop_geomin=0,pop_geomax=sqrt(0.5),
group_geomean=x[3],group_geosd=x[4],
group_geomin=0,group_geomax=sqrt(0.5))
return(Entropy(cor_matrix=cor_matrix))
},mc.cores =ncores)
tmp1 = seq(sqrt(0.1),sqrt(0.2),by=0.05)
tmp2 = c(seq(1.1,1.5,by=0.1),seq(1.6,3,by=0.4))
tmp3 = seq(sqrt(0.1),sqrt(0.4),by=0.08)
tmp4 = c(seq(1.1,1.5,by=0.1),seq(1.6,3,by=0.4))
tmp_para = expand.grid(tmp1,tmp2,tmp3,tmp4)
tmp_para = as.list(as.data.frame(t(tmp_para)))
head(tmp_para)
tmp1 = seq(sqrt(0.1),sqrt(0.2),by=0.05)
tmp2 = c(seq(1.1,1.5,by=0.1),seq(1.6,3,by=0.4))
tmp3 = seq(sqrt(0.1),sqrt(0.4),by=0.08)
tmp4 = c(seq(1.1,1.5,by=0.1),seq(1.6,3,by=0.4))
tmp_para = expand.grid(tmp1,tmp2,tmp3,tmp4)
head(tmp_para)
tmp1 = seq(sqrt(0.1),sqrt(0.2),by=0.05)
tmp2 = c(seq(1.1,1.5,by=0.1),seq(1.6,3,by=0.4))
tmp3 = seq(sqrt(0.1),sqrt(0.4),by=0.08)
tmp4 = c(seq(1.1,1.5,by=0.1),seq(1.6,3,by=0.4))
tmp_para = expand.grid(tmp1,tmp2,tmp3,tmp4)
tmp_para = as.list(as.data.frame(t(tmp_para)))
nemas(tmp_para)
names(tmp_para)
head(tmp_para)
tmp <- expand.grid(letters[1:2], 1:3, c("+", "-"))
tmp
do.call(paste, list(as.name("A"), as.name("B")), quote = TRUE)
do.call("paste", c(tmp, sep = ""))
c(tmp, sep = "")
c(tmp)
c(1:5, 10.5, "next")
x <- 1:4
names(x) <- letters[1:4]
x
x
c(x)
class()
class(x)
class(c(x))
as.vector(x)
ll <- list(A = 1, c = "C")
ll
c(ll, d = 1:3) # which is == c(ll, as.list(c(d = 1:3))
c(ll, d = list(1:3))  # c() combining two lists
as.list(c(d = 1:3)
)
c(d = 1:3)
tmp
c(tmp)
do.call("paste", c(tmp, sep = ""))
do.call(paste, list(as.name("A"), as.name("B")), quote = TRUE)
list(as.name("A"), as.name("B"))
as.name("A")
list(as.name("A"), as.name("B"))[[1]]
class(list(as.name("A"), as.name("B"))[[1]])
testaaa = "shabizhouyun"
testaaa
shabizhouyun = 1:9
shabizhouyun
as.name(testaaa)
testaaa
shabiboying = as.name(testaaa)
shabiboying
list(x:x,y:5)
list(x=x,y=5)
do.call('<-',list(x=x,y=5))
do.call('<-',list(x=xxx,y=5))
original_string<-"variable_name=15"
parameter_value<-as.numeric("15")
parameter_name<-"variable_name"
parameter_name
parameter_value
original_string
variable_name<-parameter_value
variable_name
a
a=1
varname <- c("a", "b", "d")
get(varname[1]) + 2
eval(varname[1]) + 2
list(variable = 3)
list(variable = 3)
a=list(variable = 3)
a$variable
a$'variable'
a["variable"]
a[["variable"]]
a[[variable]]
a[variable]
a=c(1,2,3)
as.names('a')
as.name('a')
as.name(a)
as.name(c(1,2,3))
do.call(paste, list(as.name("A"), as.name("B")), quote = TRUE)
do.call(paste, list(as.name("A"), as.name("B")), quote = F)
do.call(paste, list(as.name("A"), as.name("B")), quote = T)
list(as.name("A"), as.name("B"))
do.call("<-",list(parameter_name='haha', parameter_value='15'))
haha
'haha'
list(parameter_name='haha', parameter_value='15')
list(parameter_name='haha', 'parameter_value'='15')
'haha'=15
haha
list(parameter_name=jjj, 'parameter_value'='15')
list(parameter_name='jjj', 'parameter_value'='15')
do.call('<-',list(parameter_name='jjj', 'parameter_value'='15'))
jjj
do.call('=',list(parameter_name='jjj', 'parameter_value'='15'))
do.call('=',list(parameter_name='jj', 'parameter_value'='15'))
jj
substitute(class(df), list(df = data.frame(x = 10)))
substitute(class(df), list(df = data.frame(x = 10)))
substitute(class('df'), list(df = data.frame(x = 10)))
substitute(class(df), list('df' = data.frame(x = 10)))
list('df' = data.frame(x = 10))
x <- quote(a + b)
substitute(x, list(a = 1, b = 2))
x
library(kernlab)
matrix(0.4,nc=5,nr=5)
matrix(-1/4,nc=5,nr=5)
a=matrix(-1/4,nc=5,nr=5)
diag(a)=1
a
eigen(a)
a=matrix(-1/5,nc=5,nr=5)
diag(a)=1
eogen(a)
eigen(a)
a=matrix(-1/3,nc=5,nr=5)
diag(a)=1
eigen(a)
a
0.6/sqrt(2)/3.1415+0.4/sqrt(2)/3.1415
0.2251/0.02
0.2251/0.16
log2(11.255)+1
log2(1.406875)+1
0.4/2/0.16
1.25^2
1.25^2-1
.4/2/.02
dx2x <- deriv(~ x^2, "x") ; dx2x
dx2x <- deriv(~ x^2, "x")
dx2x
mode(dx2x)
x <- -1:2
eval(dx2x)
x
length(ex1 <- expression(1 + 0:9)) # 1
ex1
eval(ex1)
install.packages("SGSeq")
source("https://bioconductor.org/biocLite.R")
biocLite("SGSeq")
library(SGSeq)
path <- system.file("extdata", package = "SGSeq")
path
si$file_bam <- file.path(path, "bams", si$file_bam)
si
si
si
library(SGSeq)
library("TxDb.Mmusculus.UCSC.mm10.ensGene")
library("TxDb.Hsapiens.UCSC.hg19.knownGene")
source("https://bioconductor.org/biocLite.R")
library("TxDb.Hsapiens.UCSC.hg19.knownGene")
biocLite("TxDb.Hsapiens.UCSC.hg19.knownGene")
library("TxDb.Hsapiens.UCSC.hg19.knownGene")
library("TxDb.Mmusculus.UCSC.mm10.ensGene")
si
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
txdb
txdb <- keepSeqlevels(txdb, "chr16")
txdb
seqlevelsStyle(txdb) <- "NCBI"
txdb
txf_ucsc <- convertToTxFeatures(txdb)
txf_ucsc
txf_ucsc <- txf_ucsc[txf_ucsc %over% gr]
head(txf_ucsc)
txf_ucsc <- convertToTxFeatures(txdb)
txf_ucsc <- txf_ucsc[txf_ucsc %over% gr]
txf_ucsc
length(txf_ucsc)
class(txf_ucsc)
dim(txf_ucsc)
txf_ucsc <- convertToTxFeatures(txdb)
txf_ucsc <- txf_ucsc[txf_ucsc %over% gr]
head(txf_ucsc)
ls('package:TxDb.Mmusculus.UCSC.mm10.ensGene')
TxDb.Mmusculus.UCSC.mm10.ensGene
head(txf_ucsc)
type(txf_ucsc)
head(txName(txf_ucsc))
head(geneName(txf_ucsc))
gr
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
txdb <- keepSeqlevels(txdb, "chr15")
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
txdb <- keepSeqlevels(txdb, "chr16")
library("TxDb.Hsapiens.UCSC.hg19.knownGene")
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
txdb <- keepSeqlevels(txdb, "chr16")
seqlevelsStyle(txdb) <- "NCBI"
library("TxDb.Hsapiens.UCSC.hg19.knownGene")
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
txdb <- keepSeqlevels(txdb, "chr16")
seqlevelsStyle(txdb) <- "NCBI"
si
si
path <- system.file("extdata", package = "SGSeq")
si$file_bam <- file.path(path, "bams", si$file_bam)
si
library("TxDb.Hsapiens.UCSC.hg19.knownGene")
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
txdb <- keepSeqlevels(txdb, "chr16")
seqlevelsStyle(txdb) <- "NCBI"
txf_ucsc <- convertToTxFeatures(txdb)
library(SGSeq)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
txdb <- keepSeqlevels(txdb, "chr16")
seqlevelsStyle(txdb) <- "NCBI"
library("TxDb.Hsapiens.UCSC.hg19.knownGene")
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
txdb <- keepSeqlevels(txdb, "chr16")
seqlevelsStyle(txdb) <- "NCBI"
library(SGSeq)
si
path <- system.file("extdata", package = "SGSeq")
si$file_bam <- file.path(path, "bams", si$file_bam)
library("TxDb.Hsapiens.UCSC.hg19.knownGene")
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
txdb <- keepSeqlevels(txdb, "chr16")
seqlevelsStyle(txdb) <- "NCBI"
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
txdb <- keepSeqlevels(txdb, "chr15")
seqlevelsStyle(txdb) <- "NCBI"
txdb <- keepSeqlevels(txdb, "chr16")
seqlevelsStyle(txdb) <- "NCBI"
library(SGSeq)
si
path <- system.file("extdata", package = "SGSeq")
si$file_bam <- file.path(path, "bams", si$file_bam)
#biocLite("TxDb.Hsapiens.UCSC.hg19.knownGene")
library("TxDb.Hsapiens.UCSC.hg19.knownGene")
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
txdb <- keepSeqlevels(txdb, "chr15")
seqlevelsStyle(txdb) <- "NCBI"
txf_ucsc <- convertToTxFeatures(txdb)
txf_ucsc
txf_ucsc <- txf_ucsc[txf_ucsc %over% gr]
gr
head(txf_ucsc)
source("https://bioconductor.org/biocLite.R")
library(SGSeq)
library(org.Mm.eg.db)
biocLite("org.Mm.eg.db")
biocLite("org.Mm.eg.db")
library(org.Mm.eg.db)
columns(org.Mm.eg.db)
head(org.Mm.eg.db)
class(org.Mm.eg.db)
xx <- as.list(org.Mm.egALIAS2EG)
xx <- xx[!is.na(xx)]
if(length(xx) > 0){
# The entrez gene identifiers for the first two elements of XX
xx[1:2]
# Get the first one
xx[[1]]
}
xx
ls('package:TxDb.Mmusculus.UCSC.mm10.ensGene')
library("TxDb.Mmusculus.UCSC.mm10.ensGene")
ls('package:TxDb.Mmusculus.UCSC.mm10.ensGene')
TxDb.Mmusculus.UCSC.mm10.ensGene
class(gr)
gr
ls("package:org.Mm.eg.db")
org.Mm.egSYMBOL
x <- org.Mm.egSYMBOL
mapped_genes <- mappedkeys(x)
xx <- as.list(x[mapped_genes])
head(xx)
ls("package:org.Mm.eg.db")
org.Mm.eg_dbInfo()
ls("package:org.Mm.eg.db")
gr
TxDb.Mmusculus.UCSC.mm10.ensGene
ls('package:TxDb.Mmusculus.UCSC.mm10.ensGene')
library(GenomicRanges)
trak2 <- "66008"
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
trak2_txs <- transcriptsBy(txdb, by="gene")[[trak2]]
trak2_txs
library("TxDb.Mmusculus.UCSC.mm10.ensGene")
txdb <- TxDb.Mmusculus.UCSC.mm10.ensGene
trak2_txs <- transcriptsBy(txdb, by="gene")[[trak2]]
trak2_txs
trak2 <- "rpl41"
trak2_txs <- transcriptsBy(txdb, by="gene")[[trak2]]
trak2_txs
library(GenomicFeatures)
trak2 <- "Rpl41"
txdb <- TxDb.Mmusculus.UCSC.mm10.ensGene
trak2_txs <- transcriptsBy(txdb, by="gene")[[trak2]]
trak2_txs
trak2_txs <- transcriptsBy(txdb, by="exon")[[trak2]]
trak2_txs
trak2_txs <- transcriptsBy(txdb, by="cds")[[trak2]]
trak2_txs
transcriptsBy(txdb, by="gene")
transcriptsBy(txdb, by="gene")[["ENSMUSG00000093674"]]
transcriptsBy(txdb, by="exon")[["ENSMUSG00000093674"]]
transcriptsBy(txdb, by="exon")
transcriptsBy(txdb, by="cds")[["ENSMUSG00000093674"]]
si
path <- system.file("extdata", package = "SGSeq")
si$file_bam <- file.path(path, "bams", si$file_bam)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
txdb <- keepSeqlevels(txdb, "chr16")
seqlevelsStyle(txdb) <- "NCBI"
txf_ucsc <- convertToTxFeatures(txdb)
txf_ucsc <- txf_ucsc[txf_ucsc %over% gr]
head(txf_ucsc)
type(txf_ucsc)
head(txName(txf_ucsc))
head(geneName(txf_ucsc))
sgfc_pred <- analyzeFeatures(si, which = gr)
head(rowRanges(sgfc_pred))
df <- plotFeatures(sgfc_pred, geneID = 1, color_novel = "red",include = "both")
si
path <- system.file("extdata", package = "SGSeq")
si$file_bam <- file.path(path, "bams", si$file_bam)
#biocLite("TxDb.Hsapiens.UCSC.hg19.knownGene")
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
txdb <- keepSeqlevels(txdb, "chr16")
seqlevelsStyle(txdb) <- "NCBI"
txf_ucsc <- convertToTxFeatures(txdb)
txf_ucsc <- txf_ucsc[txf_ucsc %over% gr]
head(txf_ucsc)
type(txf_ucsc)
head(txName(txf_ucsc))
head(geneName(txf_ucsc))
setwd('~/Desktop/stat215a-review/reproduce/')
rt <- read.csv(paste0(wdir,"Bishayee Colony Counts 10.27.97-3.8.csv"),sep='\t',row.names=1,header=T,skip=2)
wdir='../data/'
rt <- read.csv(paste0(wdir,"Bishayee Colony Counts 10.27.97-3.8.csv"),sep='\t',row.names=1,header=T,skip=2)
rt
rt <- read.csv(paste0(wdir,"Bishayee Colony Counts 10.27.97-3.8.csv"),sep='\t',header=T,skip=2)
rt
head(rt)
rt <- read.csv(paste0(wdir,"Bishayee Colony Counts 10.27.97-3.8.csv"),header=T,skip=2)
rt
head(rt)
